---

# Playbook: xwiki
# Author: Shahriar Shafiullah
# Date: 03-08-2015
# Description: Creates LXC containers and installs Xwiki on top of a tomcat7 and Postgressql stack

- hosts: nodes 
  user: ubuntu 
  sudo: yes
  sudo_user: root 

  tasks:

# Create LXC containers
    - name: Install LXC
      apt:
        name: lxc
        update_cache: yes
        state: installed

# Configure LXC to send fixed IP to app1, app2 and db1
    - name: Configure LXC default
      copy:
        src: lxc/lxc-net
        dest: /etc/default/lxc-net

    - name: Configure LXC dnsmasq
      copy:
        src: lxc/dnsmasq.conf
        dest: /etc/lxc/dnsmasq.conf

# Restart required to recognize dnsmasq new settings.
# We only want to do this once so the service module was not used.
# A handler was not appropriate for this as the next few stanzas depend
# on the dnsmasq settings working (handlers only execute once the tasks 
# section runs all the way through
    - name: Restart lxc-net
      shell: /usr/sbin/service lxc-net restart; /usr/bin/touch /opt/lxc
      args:
        creates: /opt/lxc

# Install requirements for lxc_container module
    - apt: name={{item}}
      with_items:
        - python-setuptools
        - unzip
        - git
        - build-essential
        - python-dev
        - lxc-dev

# Supposed 'stable' version of python-pip on the Ubuntu repository does not function
# Latest easy_install version used instead
    - easy_install: name=pip

# pip module appears to run everytime regardless of if the package already exists
    - pip: name=git+https://github.com/lxc/python2-lxc.git#egg=python2-lxc

# lxc_container is new to version 1.8 of ansible and seems to be a bit buggy
    - name: app1_container
      lxc_container:
        name: app1
        template: ubuntu
        state: started
        template_options: --release trusty
        container_command: |
          apt-get update
          apt-get install tomcat7 -y

    - name: app2_container
      lxc_container:
        name: app2
        template: ubuntu
        state: started
        template_options: --release trusty
        container_command: |
          apt-get update
          apt-get install tomcat7 -y

    - name: db1_container
      lxc_container:
        name: db1
        template: ubuntu
        state: started
        template_options: --release trusty
        container_command: |
          apt-get update
          apt-get install postgresql-9.3 -y

    - name: create interfaces app1
      copy:
        src: lxc/app1_interfaces
        dest: /var/lib/lxc/app1/rootfs/etc/network/interfaces

    - name: create interfaces app2
      copy:
        src: lxc/app2_interfaces
        dest: /var/lib/lxc/app2/rootfs/etc/network/interfaces

    - name: create interfaces db1
      copy:
        src: lxc/db1_interfaces
        dest: /var/lib/lxc/db1/rootfs/etc/network/interfaces

# Tomcat7 configuration 

    - name: create setenv.sh file app1
      copy:
        src: tomcat/setenv.sh
        dest: /var/lib/lxc/app1/rootfs/usr/share/tomcat7/bin/setenv.sh
    
    - name: create setenv.sh file app2
      copy:
        src: tomcat/setenv.sh
        dest: /var/lib/lxc/app2/rootfs/usr/share/tomcat7/bin/setenv.sh

    - name: change attributes on setenv.sh app1
      file:
        path: /var/lib/lxc/app1/rootfs/usr/share/tomcat7/bin/setenv.sh
        owner: root
        mode:  0755

    - name: change attributes on setenv.sh app2
      file:
        path: /var/lib/lxc/app2/rootfs/usr/share/tomcat7/bin/setenv.sh
        owner: root
        mode:  0755

    - name: install postgres JDBC library app1
      get_url:
        dest: /var/lib/lxc/app1/rootfs/usr/share/tomcat7/lib/postgresql-9.4-1201.jdbc4.jar
        url: https://jdbc.postgresql.org/download/postgresql-9.4-1201.jdbc4.jar
        validate_certs: no
        force: no

    - name: install postgres JDBC library app2
      get_url:
        dest: /var/lib/lxc/app2/rootfs/usr/share/tomcat7/lib/postgresql-9.4-1201.jdbc4.jar
        url: https://jdbc.postgresql.org/download/postgresql-9.4-1201.jdbc4.jar
        validate_certs: no
        force: no

# Postgres database configuration

    - name: Give ansible permission to access postgres
      copy:
        src: postgres/pg_hba.conf
        dest: /var/lib/lxc/db1/rootfs/etc/postgresql/9.3/main/pg_hba.conf

    - name: Open port to app servers
      copy:
        src: postgres/postgresql.conf
        dest: /var/lib/lxc/db1/rootfs/etc/postgresql/9.3/main/postgresql.conf

    - name: Create DB sql script
      copy:
        src: postgres/xwiki.sql
        dest:  /var/lib/lxc/db1/rootfs/opt/xwiki.sql

    - name: db1_container
      lxc_container:
        name: db1
        template: ubuntu
        state: started
        template_options: --release trusty
        container_command: |
          chown postgres:postgres /etc/postgresql/9.3/main/pg_hba.conf
          service postgresql restart
          /usr/bin/psql -U postgres -f /opt/xwiki.sql

# Deploy the Xwiki application

    - name: Download Xwiki war file app1
      get_url:
        dest: /var/lib/lxc/app1/rootfs/opt/xwiki-enterprise-web-7.1.2-20150725.161333-26.war
        url: http://maven.xwiki.org/snapshots/org/xwiki/enterprise/xwiki-enterprise-web/7.1.2-SNAPSHOT/xwiki-enterprise-web-7.1.2-20150725.161333-26.war 
        force: no

    - name: Download Xwiki war file app2
      get_url:
        dest: /var/lib/lxc/app2/rootfs/opt/xwiki-enterprise-web-7.1.2-20150725.161333-26.war
        url: http://maven.xwiki.org/snapshots/org/xwiki/enterprise/xwiki-enterprise-web/7.1.2-SNAPSHOT/xwiki-enterprise-web-7.1.2-20150725.161333-26.war 
        force: no

# Check if the default ROOT application for tomcat7 exists. Remove it if it does
    - stat: path=/var/lib/lxc/app1/rootfs/var/lib/tomcat7/webapps/ROOT/index.html
      register: app1_root
        
    - stat: path=/var/lib/lxc/app2/rootfs/var/lib/tomcat7/webapps/ROOT/index.html
      register: app2_root

    - shell: "rm -rf /var/lib/lxc/app1/rootfs/var/lib/tomcat7/webapps/ROOT/*"
      when: app1_root.stat.exists == True

    - shell: "rm -rf /var/lib/lxc/app2/rootfs/var/lib/tomcat7/webapps/ROOT/*"
      when: app2_root.stat.exists == True

    - name: deploy xwiki app1
      command: /usr/bin/unzip /var/lib/lxc/app1/rootfs/opt/xwiki-enterprise-web-7.1.2-20150725.161333-26.war
      args: 
        chdir: /var/lib/lxc/app1/rootfs/var/lib/tomcat7/webapps/ROOT
        creates: /var/lib/lxc/app1/rootfs/var/lib/tomcat7/webapps/ROOT/templates

    - name: deploy xwiki app2
      command: /usr/bin/unzip /var/lib/lxc/app2/rootfs/opt/xwiki-enterprise-web-7.1.2-20150725.161333-26.war
      args: 
        chdir: /var/lib/lxc/app2/rootfs/var/lib/tomcat7/webapps/ROOT
        creates: /var/lib/lxc/app2/rootfs/var/lib/tomcat7/webapps/ROOT/templates

    - name: Configure hibernate file app1
      copy:
        src: tomcat/hibernate.cfg.xml
        dest: /var/lib/lxc/app1/rootfs/var/lib/tomcat7/webapps/ROOT/WEB-INF/hibernate.cfg.xml

    - name: Configure hibernate file app2
      copy:
        src: tomcat/hibernate.cfg.xml
        dest: /var/lib/lxc/app2/rootfs/var/lib/tomcat7/webapps/ROOT/WEB-INF/hibernate.cfg.xml

# Bug in lxc_container will not let us reload the configurations so a stop/start is required

    - name: app1_container_stop
      lxc_container:
        name: app1
        state: stopped

    - name: app1_container_start
      lxc_container:
        name: app1
        state: started

    - name: app2_container_stop
      lxc_container:
        name: app2
        state: stopped

    - name: app2_container_start
      lxc_container:
        name: app2
        state: started

# Install nginx as a loadbalancer
    
    - name: Install nginx service
      apt:
        name: nginx
        state: installed

    - name: Create nginx.conf config
      copy:
        src: nginx/nginx.conf
        dest: /etc/nginx/nginx.conf
      notify: Reload nginx

    - name: Configure nginx defaults
      copy:
        src: nginx/default.conf
        dest: /etc/nginx/conf.d/default.conf
      notify: Reload nginx


  handlers:
    - name: Reload nginx 
      action: service name=nginx state=restarted

